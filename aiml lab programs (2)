{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"97yttEgoSMi8","executionInfo":{"status":"ok","timestamp":1726816742471,"user_tz":-330,"elapsed":1268,"user":{"displayName":"Bhanuri Ananya","userId":"10769475789434114177"}},"outputId":"cdadda20-a602-410b-fd89-ec09158e089b"},"outputs":[{"output_type":"stream","name":"stdout","text":["1 2 3 4 5 6 "]}],"source":["# 1) BREADTH-FIRST SEARCH\n","from collections import deque\n","\n","def bfs(graph, start):\n","\n","    queue = deque([start])\n","    visited = set([start])\n","\n","\n","    while queue:\n","\n","        vertex = queue.popleft()\n","        print(vertex, end=\" \")\n","\n","\n","        for neighbor in graph[vertex]:\n","            if neighbor not in visited:\n","                visited.add(neighbor)\n","                queue.append(neighbor)\n","\n","\n","graph = {\n","    1: [2, 3],\n","    2: [4, 5],\n","    3: [6],\n","    4: [],\n","    5: [6],\n","    6: []\n","}\n","\n","\n","bfs(graph, 1)"]},{"cell_type":"code","source":["# 2) DEPTH-FIRST SEARCH\n","def dfs(graph, start, visited=None):\n","    if visited is None:\n","        visited = set()\n","\n","\n","    visited.add(start)\n","    print(start, end=\" \")\n","\n","\n","    for neighbor in graph[start]:\n","        if neighbor not in visited:\n","            dfs(graph, neighbor, visited)\n","\n","graph = {\n","    1: [2, 3],\n","    2: [4, 5],\n","    3: [6],\n","    4: [],\n","    5: [6],\n","    6: []\n","}\n","\n","\n","dfs(graph, 1)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZFr_OhosTVMh","executionInfo":{"status":"ok","timestamp":1726816883289,"user_tz":-330,"elapsed":722,"user":{"displayName":"Bhanuri Ananya","userId":"10769475789434114177"}},"outputId":"c56a27f1-9551-4764-ffed-d3753ac3bdbc"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1 2 4 5 6 3 "]}]},{"cell_type":"code","source":["# 3)Iterative Deepening Depth-First Search.\n","def dfs_limited(graph, node, depth, visited):\n","    if depth == 0:\n","        return False\n","    if node not in visited:\n","        print(node, end=\" \")\n","        visited.add(node)\n","        for neighbor in graph[node]:\n","            dfs_limited(graph, neighbor, depth - 1, visited)\n","\n","def iddfs(graph, start, max_depth):\n","    for depth in range(1, max_depth + 1):\n","        visited = set()\n","        print(f\"Depth {depth}: \", end=\"\")\n","        dfs_limited(graph, start, depth, visited)\n","        print()\n","\n","\n","graph = {\n","    1: [2, 3],\n","    2: [4, 5],\n","    3: [6],\n","    4: [],\n","    5: [6],\n","    6: []\n","}\n","\n","\n","iddfs(graph, 1, 3)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9nBA9DkmTxl7","executionInfo":{"status":"ok","timestamp":1726817425406,"user_tz":-330,"elapsed":675,"user":{"displayName":"Bhanuri Ananya","userId":"10769475789434114177"}},"outputId":"eec72204-7215-4b58-dd7a-3b4d9d882f5b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Depth 1: 1 \n","Depth 2: 1 2 3 \n","Depth 3: 1 2 4 5 3 6 \n"]}]},{"cell_type":"code","source":["# 4) SIMPLE PLOTS - BAR GRAPH\n","import matplotlib.pyplot as plt\n","\n","# Data for Bar Plot\n","categories = ['A', 'B', 'C', 'D']\n","values = [10, 20, 15, 25]\n","\n","# Creating Bar Plot\n","plt.bar(categories, values)\n","plt.title('Bar Plot')\n","plt.xlabel('Categories')\n","plt.ylabel('Values')\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":472},"id":"XU2VxIaQV8PV","executionInfo":{"status":"ok","timestamp":1726817519070,"user_tz":-330,"elapsed":1424,"user":{"displayName":"Bhanuri Ananya","userId":"10769475789434114177"}},"outputId":"17a3d3f1-fcd7-458b-ae0d-059fe31d30d1"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# 4) SIMPLE PLOTS - SCATTER PLOT\n","import matplotlib.pyplot as plt\n","\n","x = [1, 2, 3, 4, 5]\n","y = [5, 7, 8, 5, 6]\n","plt.scatter(x, y)\n","plt.title('Scatter Plot')\n","plt.xlabel('X-axis')\n","plt.ylabel('Y-axis')\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":472},"id":"EmDjJqHkWF9i","executionInfo":{"status":"ok","timestamp":1726817638318,"user_tz":-330,"elapsed":1070,"user":{"displayName":"Bhanuri Ananya","userId":"10769475789434114177"}},"outputId":"73f548eb-a77a-4452-c6a5-5449d8a87c15"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# 4) SIMPLE PLOTS- HISTOGRAM\n","import matplotlib.pyplot as plt\n","\n","# Data for Box Plot\n","data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n","\n","# Creating Box Plot\n","plt.boxplot(data)\n","plt.title('Box Plot')\n","plt.show()\n"," - HISTOGRAM\n","import matplotlib.pyplot as plt\n","data = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5]\n","plt.hist(data, bins=5, edgecolor='black')\n","plt.title('Histogram')\n","plt.xlabel('Data')\n","plt.ylabel('Frequency')\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":472},"id":"N3ldYZt2W4Ka","executionInfo":{"status":"ok","timestamp":1726817792272,"user_tz":-330,"elapsed":938,"user":{"displayName":"Bhanuri Ananya","userId":"10769475789434114177"}},"outputId":"637ae473-ef43-429e-b166-a21c83df8cd5"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# 4) SIMPLE PLOTS - BOX PLOT\n","import matplotlib.pyplot as plt\n","data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n","plt.boxplot(data)\n","plt.title('Box Plot')\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":452},"id":"fmhT3mI5XKoC","executionInfo":{"status":"ok","timestamp":1726817910808,"user_tz":-330,"elapsed":889,"user":{"displayName":"Bhanuri Ananya","userId":"10769475789434114177"}},"outputId":"3a6662a4-6204-4a03-c1bd-8c2906cfc4e8"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# 5) RANDOM MOVEMENT\n","import random\n","\n","def random_movement(steps):\n","\n","    x, y = 0, 0\n","    print(f\"Starting position: ({x}, {y})\")\n","\n","\n","    movements = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n","\n","    for step in range(steps):\n","        move = random.choice(movements)\n","        x += move[0]\n","        y += move[1]\n","        print(f\"Step {step + 1}: Moved to ({x}, {y})\")\n","\n","    print(f\"Final position: ({x}, {y})\")\n","\n","\n","random_movement(10)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yrb-58nLXy_w","executionInfo":{"status":"ok","timestamp":1726818058328,"user_tz":-330,"elapsed":732,"user":{"displayName":"Bhanuri Ananya","userId":"10769475789434114177"}},"outputId":"b27ed086-a8a4-400e-d6c7-4f1a06cd3d85"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Starting position: (0, 0)\n","Step 1: Moved to (1, 0)\n","Step 2: Moved to (0, 0)\n","Step 3: Moved to (0, 1)\n","Step 4: Moved to (-1, 1)\n","Step 5: Moved to (-1, 0)\n","Step 6: Moved to (-2, 0)\n","Step 7: Moved to (-2, 1)\n","Step 8: Moved to (-3, 1)\n","Step 9: Moved to (-4, 1)\n","Step 10: Moved to (-3, 1)\n","Final position: (-3, 1)\n"]}]},{"cell_type":"code","source":["# 6) A* ALGORITHM\n","import heapq\n","\n","class Node:\n","    def __init__(self, position, parent=None):\n","        self.position = position\n","        self.parent = parent\n","        self.g = 0\n","        self.h = 0\n","        self.f = 0\n","\n","    def __lt__(self, other):\n","        return self.f < other.f\n","\n","def heuristic(a, b):\n","\n","    return abs(a[0] - b[0]) + abs(a[1] - b[1])\n","\n","def a_star(start, goal, grid):\n","    open_list = []\n","    closed_list = set()\n","\n","    start_node = Node(start)\n","    goal_node = Node(goal)\n","\n","    heapq.heappush(open_list, start_node)\n","\n","    while open_list:\n","        current_node = heapq.heappop(open_list)\n","\n","        if current_node.position == goal_node.position:\n","\n","            path = []\n","            while current_node:\n","                path.append(current_node.position)\n","                current_node = current_node.parent\n","            return path[::-1]\n","\n","        closed_list.add(current_node.position)\n","\n","        for new_position in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n","            node_position = (current_node.position[0] + new_position[0], current_node.position[1] + new_position[1])\n","\n","            if (node_position[0] > (len(grid) - 1) or\n","                node_position[0] < 0 or\n","                node_position[1] > (len(grid[len(grid) - 1]) - 1) or\n","                node_position[1] < 0):\n","                continue\n","\n","            if grid[node_position[0]][node_position[1]] != 0:\n","                continue\n","\n","            if node_position in closed_list:\n","                continue\n","\n","            neighbor = Node(node_position, current_node)\n","\n","\n","            neighbor.g = current_node.g + 1\n","            neighbor.h = heuristic(neighbor.position, goal_node.position)\n","            neighbor.f = neighbor.g + neighbor.h\n","\n","\n","            if any(open_node.position == neighbor.position and open_node.f <= neighbor.f for open_node in open_list):\n","                continue\n","\n","            heapq.heappush(open_list, neighbor)\n","\n","    return None\n","\n","grid = [\n","    [0, 0, 0, 0, 0],\n","    [0, 1, 1, 1, 0],\n","    [0, 0, 0, 0, 0],\n","    [0, 1, 1, 1, 0],\n","    [0, 0, 0, 0, 0],\n","]\n","\n","start = (0, 0)\n","goal = (4, 4)\n","\n","path = a_star(start, goal, grid)\n","print(\"Path from start to goal:\", path)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GVMFW9sxYdDu","executionInfo":{"status":"ok","timestamp":1726818268297,"user_tz":-330,"elapsed":616,"user":{"displayName":"Bhanuri Ananya","userId":"10769475789434114177"}},"outputId":"f38ed4d7-f2d4-40c2-f5d1-9887ac79c306"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Path from start to goal: [(0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (1, 4), (2, 4), (3, 4), (4, 4)]\n"]}]}]}